# -*-Python-*-

import os
import re
import sys
import string
from model import  *
from build_pipeline import  *


SetOption('implicit_cache', 1)

defs = {
    'ALL_HW_DIRS'        : '@ALL_HW_DIRS@',
    'APM_FILE'           : '@APM_FILE@',
    'APM_NAME'           : '@APM_NAME@',
    'BDPI_CS'            : '@BDPI_CS@',
    'BSC'                : '@BSC@',
    'BSC_FLAGS_VERILOG'  : '@BSC_FLAGS_VERILOG@',
    'BSC_FLAGS_SIM'      : '@BSC_FLAGS_SIM@',
    'BUILD_DIR'          : '@BUILD_DIR@',
    'CONNECTION_SCRIPT'  : 'hasim-connect',
    'COST_TABLE'         : '@COST_TABLE@',
    'FPGA_PART_XILINX'   : '@FPGA_PART_XILINX@',
    'GIVEN_BAS'          : '@GIVEN_BAS@',
    'GIVEN_VHDS'         : '@GIVEN_VHDS@',
    'GIVEN_NGCS'         : '@GIVEN_NGCS@',
    'GIVEN_BMMS'         : '@GIVEN_BMMS@', 
    'GIVEN_ELFS'         : '@GIVEN_ELFS@',
    'GIVEN_CS'           : '@GIVEN_CS@',
    'GIVEN_VERILOGS'           : '@GIVEN_VERILOGS@',
    'GIVEN_ALTERAVS'     : '@GIVEN_ALTERA_VERILOGS@',
    'GIVEN_XCFS'         : '@GIVEN_XCFS@',
    'GIVEN_UCFS'         : '@GIVEN_UCFS@',
    'GIVEN_QSFS'         : '@GIVEN_QSFS@',
    'GIVEN_SDCS'         : '@GIVEN_SDCS@',
    'GIVEN_DATAS'        : '@GIVEN_DATAS@',
    'GEN_BAS'            : '@GEN_BAS@',
    'GEN_VS'             : '@GEN_VS@',
    'GEN_CXXS'           : 'schedule.cxx @GEN_CXXS@',
    'GEN_HS'             : 'schedule.h @GEN_HS@',
    'LDFLAGS'            : '-L /usr/lib64/curses -L /usr/lib/curses',
    'M5_BUILD_DIR'       : '@M5_BUILD_DIR@',    # Defined if m5 simulator is present
    'MAKE_ALL_TARGET'    : '@MAKE_ALL_TARGET@',
    'MAP_OPTIONS'        : '@MAP_OPTIONS@',
    'SYNTHESIS_TOOL'     : '@SYNTHESIS_TOOL@',
    'WORKSPACE_ROOT'     : '@MODEL_ROOT@',
    'ROOT_DIR_MODEL'     : '@ROOT_DIR_MODEL@',
    'ROOT_DIR_HW'        : '@ROOT_DIR_HW@',
    'ROOT_DIR_HW_INC'    : '@ROOT_DIR_HW_INC@',
    'ROOT_DIR_SW'        : '@ROOT_DIR_SW@',
    'ROOT_DIR_SW_INC'    : '@ROOT_DIR_SW_INC@',
    'SIMULATED_ISA'      : '@SIMULATED_ISA@',
    'SW_INC_DIRS'        : '@SW_INC_DIRS@',
    'SW_LIBS'            : '@SW_LIBS@',
    'SYNTH_TOP'          : '@SYNTH_TOP@',
    'SYNTH_WRAPPERS'     : '@SYNTH_WRAPPERS@',
    'SYNTH_BOUNDARIES'   : [@SYNTH_BOUNDARIES@],
    'TMP_BSC_DIR'        : '@TMP_BSC_DIR@',
    'TMP_XILINX_DIR'     : '@TMP_XILINX_DIR@',
    'WORKSPACE_ROOT'     : '@WORKSPACE_ROOT@',
}

# Propagate environment from external state
env = Environment(ENV = os.environ, DEFS = defs)
env['ENV']['SHELL'] = '/bin/sh'

env['DEFS']['ROOT_DIR_HW_MODEL'] = env['DEFS']['ROOT_DIR_HW'] + '/' + \
                                   env['DEFS']['ROOT_DIR_MODEL'];
env['DEFS']['ROOT_DIR_SW_MODEL'] = env['DEFS']['ROOT_DIR_SW'] + '/' + \
                                   env['DEFS']['ROOT_DIR_MODEL'];

##
## env.Clone() is new as of 0.97.  It used to be called Copy().
##
import SCons.Environment
try:
    SCons.Environment.Environment.Clone
except AttributeError:
    SCons.Environment.Environment.Clone = SCons.Environment.Environment.Copy


############################################################################
############################################################################
##
## Build rules
##
############################################################################
############################################################################

APM_NAME = env['DEFS']['APM_NAME']

##
## Override Xilinx COST_TABLE with command line
##
env['DEFS']['COST_TABLE'] = ARGUMENTS.get('COST_TABLE', env['DEFS']['COST_TABLE'])



############################################################################
##
## Rules for building a Xilinx bit image
##
############################################################################

TMP_XILINX_DIR = env['DEFS']['TMP_XILINX_DIR']

moduleList = ModuleList(env, ARGUMENTS)

moduleList.dump()                      

# we will build whatever the user wants us to build
Build(moduleList)

#Set as default the aggregation of deps
Default(moduleList.topDependency)


##
## Clean up a few extra files not described in the build rules
##
if env.GetOption('clean'):
    os.system('cd ' + TMP_XILINX_DIR + '; rm -f ' + APM_NAME + '*')
    os.system('rm -f APM_NAME')




    
