#include "asim/provides/scratchpad_memory.h"

// ***
// For now fix the data size at 64 bits until the RRR type system is more flexible.
// ***

service SCRATCHPAD_MEMORY
{
    // ********************************************************************
    //
    // RRR sends arguments from the FPGA to the host in reverse order in
    // memory.  FPGA -> host array elements are reversed here so lines
    // appear in host memory in order.
    //
    // Host -> FPGA arrays are stored in RRR chunks in reverse order but
    // then reversed again before being sent to the FPGA.  (I don't know
    // why.)  Host -> FPGA arrays are passed in this code in normal
    // order so that data can be copied directly from memory.
    //
    // ********************************************************************

    server sw (cpp, method) <- hw (bsv, method)
    {
        // Request regionWords scratchpad words for scratchpad region regionID.
        method InitRegion (in UINT32[32] regionID, in UINT32[32] regionEndIdx);

        //
        // Store Line --
        //     Line sized store.
        //
        //     byteMask indicates which data elements are valid and should be
        //     written.  The mask is designed for use by the SSE maskmovq
        //     instruction.
        //
        //     Address requirements are the same as load.
        //
        method StoreLine (in UINT64[64] byteMask,
                          in UINT64[64] addr,
                          in UINT64[64] data3,
                          in UINT64[64] data2,
                          in UINT64[64] data1,
                          in UINT64[64] data0);

        //
        // Store Word --
        //     Word sized store.
        //
        method StoreWord (in UINT64[64] byteMask,
                          in UINT64[64] addr,
                          in UINT64[64] data);

        //
        // Load Line --
        //     Assume 4 words per line until RRR types are more general.
        //
        method LoadLine (in UINT64[64] addr,
                         out UINT64[64] data0,
                         out UINT64[64] data1,
                         out UINT64[64] data2,
                         out UINT64[64] data3);
    };
};
