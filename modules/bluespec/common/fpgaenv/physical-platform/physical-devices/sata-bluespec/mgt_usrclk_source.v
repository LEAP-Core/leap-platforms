///////////////////////////////////////////////////////////////////////////////
//$Date: 2009/11/26 05:47:36 $
//$Revision: 1.1 $
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /
// \   \   \/     Vendor : Xilinx
//  \   \         Version : 2.1
//  /   /         Application : RocketIO GTP Transceiver Wizard
// /___/   /\     Filename : mgt_usrclk_source.v
// \   \  /  \
//  \___\/\___\
//
//
// Module MGT_USRCLK_SOURCE (for use with GTP Transceivers)
// Generated by Xilinx RocketIO GTP Transceiver Wizard
// 
// 
// (c) Copyright 2006-2010 Xilinx, Inc. All rights reserved.
// 
// This file contains confidential and proprietary information
// of Xilinx, Inc. and is protected under U.S. and
// international copyright and other intellectual property
// laws.
// 
// DISCLAIMER
// This disclaimer is not a license and does not grant any
// rights to the materials distributed herewith. Except as
// otherwise provided in a valid license issued to you by
// Xilinx, and to the maximum extent permitted by applicable
// law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
// WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
// AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
// BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
// INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
// (2) Xilinx shall not be liable (whether in contract or tort,
// including negligence, or under any other theory of
// liability) for any loss or damage of any kind or nature
// related to, arising under or in connection with these
// materials, including for any direct, or any indirect,
// special, incidental, or consequential loss or damage
// (including loss of data, profits, goodwill, or any type of
// loss or damage suffered as a result of any action brought
// by a third party) even if such damage or loss was
// reasonably foreseeable or Xilinx had been advised of the
// possibility of the same.
// 
// CRITICAL APPLICATIONS
// Xilinx products are not designed or intended to be fail-
// safe, or for use in any application requiring fail-safe
// performance, such as life-support or safety devices or
// systems, Class III medical devices, nuclear facilities,
// applications related to the deployment of airbags, or any
// other applications that could lead to death, personal
// injury, or severe property or environmental damage
// (individually and collectively, "Critical
// Applications"). Customer assumes the sole risk and
// liability of any use of Xilinx products in Critical
// Applications, subject only to applicable laws and
// regulations governing limitations on product liability.
// 
// THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
// PART OF THIS FILE AT ALL TIMES. 


`timescale 1ns / 1ps

//***********************************Entity Declaration*******************************
module MGT_USRCLK_SOURCE #
(
    parameter FREQUENCY_MODE   = "LOW",
    parameter PERFORMANCE_MODE = "MAX_SPEED"
)
(
    DIV1_OUT,  
    DIV2_OUT,
    DCM_LOCKED_OUT,
    CLK_IN,  
    DCM_RESET_IN

);

`define DLY #1

// synthesis attribute X_CORE_INFO of MGT_USRCLK_SOURCE is "v5_gtpwizard_v2_1, Coregen v12.1";

//*********************************** Port Declaration *******************************

    output          DIV1_OUT;
    output          DIV2_OUT;
    output          DCM_LOCKED_OUT;
    input           CLK_IN;
    input           DCM_RESET_IN;

//*********************************Wire Declarations**********************************

    wire    [15:0]  not_connected_i;
    wire            clkfb_i;
    wire            clkdv_i;
    wire            clk0_i;
    wire            dcm_reset_i;

    reg     [1:0]   count;

//*********************************** Beginning of Code *******************************
 
    always @(posedge CLK_IN  or posedge DCM_RESET_IN )
    begin
	    if(DCM_RESET_IN) count  <=   `DLY 2'b00; 
	    else if(count != 2'b11) count    <=   count + 1'b1;
	    else count <= count;
    end

    assign   dcm_reset_i = (count<2'b11)?1'b1:1'b0;

    // Instantiate a DCM module to divide the reference clock.
    DCM_BASE #
    (
        .CLKDV_DIVIDE               (2.0),
        .DFS_FREQUENCY_MODE         ("LOW"), 
        .DLL_FREQUENCY_MODE         (FREQUENCY_MODE),
	.DCM_PERFORMANCE_MODE       (PERFORMANCE_MODE)
    )
    clock_divider_i
    (
        .CLK0                       (clk0_i),
        .CLK180                     (not_connected_i[0]),
        .CLK270                     (not_connected_i[1]),
        .CLK2X                      (not_connected_i[2]),
        .CLK2X180                   (not_connected_i[3]),
        .CLK90                      (not_connected_i[4]),
        .CLKDV                      (clkdv_i),
        .CLKFX                      (not_connected_i[5]),
        .CLKFX180                   (not_connected_i[6]),
        .LOCKED                     (DCM_LOCKED_OUT),
        .CLKFB                      (clkfb_i),
        .CLKIN                      (CLK_IN),
        .RST                        (dcm_reset_i)
    );

    
    BUFG dcm_1x_bufg_i
    (
        .I                          (clk0_i),
        .O                          (clkfb_i)
    );

    assign  DIV1_OUT  =   clkfb_i;


    BUFG dcm_div2_bufg_i
    (
        .I                          (clkdv_i),
        .O                          (DIV2_OUT)
    );


endmodule

