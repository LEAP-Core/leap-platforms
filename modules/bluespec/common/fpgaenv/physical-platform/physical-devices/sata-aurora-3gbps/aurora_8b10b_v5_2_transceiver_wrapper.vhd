-------------------------------------------------------------------------------
-- (c) Copyright 2008 Xilinx, Inc. All rights reserved.
--
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
--
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
--
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
--
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
-- 
--------------------------------------------------------------------------------
--   ____  ____ 
--  /   /\/   / 
-- /___/  \  /    Vendor: Xilinx 
-- \   \   \/     Version : 7.1i
--  \   \         Application : 
--  /   /         Filename : aurora_8b10b_v5_2_GTP_WRAPPER.vhd
-- /___/   /\     Timestamp : 02/16/2005 10:19:02
-- \   \  /  \ 
--  \___\/\___\ 
--------------------------------------------------------------------------------
--Command: 
--Design Name: aurora_8b10b_v5_2_GTP_WRAPPER
--
-- Module aurora_8b10b_v5_2_GTP_WRAPPER
-- Generated by Xilinx Architecture Wizard
-- Written for synthesis tool: XST
--------------------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.ALL;
use ieee.numeric_std.ALL;
library UNISIM;
use UNISIM.Vcomponents.ALL;

entity aurora_8b10b_v5_2_GTP_WRAPPER is
generic
(
    SIM_MODE                : string    := "FAST"; -- Set to Fast Functional Simulation Model

    --Simulation attributes
    CHAN_BOND_LEVEL_0 : integer := 0;
    CHAN_BOND_LEVEL_1 : integer := 0;

    SIM_GTPRESET_SPEEDUP :integer :=   0;      --Set to 1 to speed up sim reset
    SIM_PLL_PERDIV2      :bit_vector  :=   x"14d";    --Set to the VCO Unit Interval time
    CHAN_BOND_MODE_0     :string := "OFF";
    CHAN_BOND_MODE_1     :string := "OFF";
    --Refclk attributes
    CLKINDC_B            :boolean :=   TRUE 
);
port
(
   
RESETDONE	: out std_logic;
RESET_LISM	: out std_logic;

---------------------- Loopback and Powerdown Ports ----------------------
LOOPBACK_IN                               : in    std_logic_vector (2 downto 0);
--------------------- Receive Ports - 8b10b Decoder ----------------------

RXCHARISCOMMA_OUT : out   std_logic_vector (1 downto 0); 
RXCHARISK_OUT     : out   std_logic_vector (1 downto 0);
RXDISPERR_OUT     : out   std_logic_vector (1 downto 0);
RXNOTINTABLE_OUT  : out   std_logic_vector (1 downto 0);
----------------- Receive Ports - Channel Bonding Ports -----------------

ENCHANSYNC_IN     : in    std_logic;

CHBONDDONE_OUT    : out   std_logic;

----------------- Receive Ports - Clock Correction Ports -----------------

RXBUFERR_OUT      : out   std_logic;

------------- Receive Ports - Comma Detection and Alignment --------------

RXREALIGN_OUT     : out   std_logic;

ENMCOMMAALIGN_IN  : in    std_logic;

ENPCOMMAALIGN_IN  : in    std_logic;

----------------- Receive Ports - RX Data Path interface -----------------
RXDATA_OUT        : out   std_logic_vector (15 downto 0);

RXRECCLK1_OUT     : out   std_logic;

RXRECCLK2_OUT     : out   std_logic;

RXRESET_IN        : in    std_logic;
RXUSRCLK_IN                               : in    std_logic;
RXUSRCLK2_IN                              : in    std_logic;
----- Receive Ports - RX Driver,OOB signalling,Coupling and Eq.,CDR ------

RX1N_IN           : in    std_logic;
RX1P_IN           : in    std_logic;

--------------- Receive Ports - RX Polarity Control Ports ----------------
RXPOLARITY_IN     : in    std_logic;

------------------- Shared Ports - Tile and PLL Ports --------------------

REFCLK                                    : in    std_logic;

GTPRESET_IN                               : in    std_logic;
PLLLKDET_OUT      : out   std_logic;
REFCLKOUT_OUT     : out   std_logic;

-------------- Transmit Ports - 8b10b Encoder Control Ports --------------

TXCHARISK_IN      : in    std_logic_vector (1 downto 0);

---------------- Transmit Ports - TX Data Path interface -----------------

TXDATA_IN         : in    std_logic_vector (15 downto 0);

TXOUTCLK1_OUT     : out   std_logic;

TXOUTCLK2_OUT     : out   std_logic;

TXRESET_IN        : in    std_logic;
 
TXUSRCLK_IN                               : in    std_logic;       
TXUSRCLK2_IN                              : in    std_logic;
TXBUFERR_OUT      : out   std_logic;

------------- Transmit Ports - TX Driver and OOB signalling --------------

TX1N_OUT          : out   std_logic;
TX1P_OUT          : out   std_logic;



RXCHARISCOMMA_OUT_unused : out   std_logic_vector (1 downto 0);
RXCHARISK_OUT_unused     : out   std_logic_vector (1 downto 0);
RXDISPERR_OUT_unused     : out   std_logic_vector (1 downto 0);
RXNOTINTABLE_OUT_unused  : out   std_logic_vector (1 downto 0);
------------------- Receive Ports - Channel Bonding Ports -----------------
RXREALIGN_OUT_unused     : out   std_logic;
RXDATA_OUT_unused        : out   std_logic_vector (15 downto 0);
RX1N_IN_unused           : in    std_logic;
RX1P_IN_unused           : in    std_logic;
RXBUFERR_OUT_unused      : out   std_logic_vector(2 downto 0);
TXBUFERR_OUT_unused      : out   std_logic_vector(1 downto 0);
CHBONDDONE_OUT_unused    : out   std_logic;
TX1N_OUT_unused          : out   std_logic;
TX1P_OUT_unused          : out   std_logic;

POWERDOWN_IN                                       : in    std_logic                  

);
end aurora_8b10b_v5_2_GTP_WRAPPER;

architecture BEHAVIORAL of aurora_8b10b_v5_2_GTP_WRAPPER is
  attribute core_generation_info               : string;
  attribute core_generation_info of BEHAVIORAL : architecture is "aurora_8b10b_v5_2,aurora_8b10b_v5_2,{backchannel_mode=Sidebands, c_aurora_lanes=1, c_column_used=left, c_gt_clock_1=GTPD3, c_gt_clock_2=None, c_gt_loc_1=X, c_gt_loc_10=X, c_gt_loc_11=X, c_gt_loc_12=X, c_gt_loc_13=X, c_gt_loc_14=X, c_gt_loc_15=X, c_gt_loc_16=X, c_gt_loc_17=X, c_gt_loc_18=X, c_gt_loc_19=X, c_gt_loc_2=X, c_gt_loc_20=X, c_gt_loc_21=X, c_gt_loc_22=X, c_gt_loc_23=X, c_gt_loc_24=X, c_gt_loc_25=X, c_gt_loc_26=X, c_gt_loc_27=X, c_gt_loc_28=X, c_gt_loc_29=X, c_gt_loc_3=X, c_gt_loc_30=X, c_gt_loc_31=X, c_gt_loc_32=X, c_gt_loc_33=X, c_gt_loc_34=X, c_gt_loc_35=X, c_gt_loc_36=X, c_gt_loc_37=X, c_gt_loc_38=X, c_gt_loc_39=X, c_gt_loc_4=X, c_gt_loc_40=X, c_gt_loc_41=X, c_gt_loc_42=X, c_gt_loc_43=X, c_gt_loc_44=X, c_gt_loc_45=X, c_gt_loc_46=X, c_gt_loc_47=X, c_gt_loc_48=X, c_gt_loc_5=X, c_gt_loc_6=X, c_gt_loc_7=X, c_gt_loc_8=1, c_gt_loc_9=X, c_lane_width=2, c_line_rate=3.0, c_nfc=false, c_nfc_mode=IMM, c_refclk_frequency=150.0, c_simplex=false, c_simplex_mode=TX, c_stream=true, c_ufc=false, flow_mode=None, interface_mode=Streaming, dataflow_config=Duplex}";
--***************************** Compopnent Declaration ****************************
component aurora_8b10b_v5_2_GTP_TILE is
generic
(
    -- Simulation attributes
    TILE_SIM_MODE                : string    := "FAST"; -- Set to Fast Functional Simulation Model
    TILE_SIM_GTPRESET_SPEEDUP    : integer   := 0; -- Set to 1 to speed up sim reset
    TILE_SIM_PLL_PERDIV2         : bit_vector:= x"140"; -- Set to the VCO Unit Interval time 

    -- Channel bonding attributes
    TILE_CHAN_BOND_LEVEL_0       : integer   := 0;     -- 0 to 7. See UG for details
    TILE_CHAN_BOND_LEVEL_1       : integer   := 0;      -- 0 to 7. See UG for details
    
    TILE_CHAN_BOND_MODE_0        : string    := "OFF";  -- "MASTER", "SLAVE", or "OFF"
    TILE_CHAN_BOND_MODE_1        : string    := "OFF"  -- "MASTER", "SLAVE", or "OFF"
);
port 
(
    ------------------------ Loopback and Powerdown Ports ----------------------
    LOOPBACK0_IN                            : in   std_logic_vector(2 downto 0);
    LOOPBACK1_IN                            : in   std_logic_vector(2 downto 0);
    RXPOWERDOWN0_IN   	                    : in   std_logic_vector(1 downto 0);
    RXPOWERDOWN1_IN   	                    : in   std_logic_vector(1 downto 0);
    TXPOWERDOWN0_IN   	                    : in   std_logic_vector(1 downto 0);
    TXPOWERDOWN1_IN   	                    : in   std_logic_vector(1 downto 0);
    ----------------------- Receive Ports - 8b10b Decoder ----------------------
    RXCHARISCOMMA0_OUT 		     	    : out std_logic_vector(1 downto 0);
    RXCHARISCOMMA1_OUT 		     	    : out std_logic_vector(1 downto 0);
    RXCHARISK0_OUT 		     	    : out std_logic_vector(1 downto 0);
    RXCHARISK1_OUT 		     	    : out std_logic_vector(1 downto 0);
    RXDISPERR0_OUT 		     	    : out std_logic_vector(1 downto 0);
    RXDISPERR1_OUT 		     	    : out std_logic_vector(1 downto 0);
    RXNOTINTABLE0_OUT 		     	    : out std_logic_vector(1 downto 0);
    RXNOTINTABLE1_OUT 		     	    : out std_logic_vector(1 downto 0);
    ------------------- Receive Ports - Channel Bonding Ports ------------------
    ------------------- Receive Ports - Clock Correction Ports--
    RXCLKCORCNT0_OUT			    : out std_logic_vector(2 downto 0);
    RXCLKCORCNT1_OUT			    : out std_logic_vector(2 downto 0);
    --------------- Receive Ports - Comma Detection and Alignment --------------
    RXBYTEREALIGN0_OUT			    : out std_logic;
    RXBYTEREALIGN1_OUT			    : out std_logic;
    RXENMCOMMAALIGN0_IN			    : in std_logic;
    RXENMCOMMAALIGN1_IN			    : in std_logic;
    RXENPCOMMAALIGN0_IN			    : in std_logic;
    RXENPCOMMAALIGN1_IN			    : in std_logic;
    ------------------- Receive Ports - RX Data Path interface -----------------
    RXDATA0_OUT                             : out  std_logic_vector(15 downto 0);
    RXDATA1_OUT                             : out  std_logic_vector(15 downto 0);
    RXDATAWIDTH0_IN                         : in   std_logic;
    RXDATAWIDTH1_IN                         : in   std_logic;
    RXRESET0_IN                             : in   std_logic;
    RXRESET1_IN                             : in   std_logic;
    RXUSRCLK0_IN                            : in   std_logic;
    RXUSRCLK1_IN                            : in   std_logic;
    RXUSRCLK20_IN                           : in   std_logic;
    RXUSRCLK21_IN                           : in   std_logic;
    ------- Receive Ports - RX Driver,OOB signalling,Coupling and Eq.,CDR ------
    RXCDRRESET0_IN                          : in   std_logic;
    RXCDRRESET1_IN                          : in   std_logic;
    RXELECIDLE0_OUT                         : out  std_logic;
    RXELECIDLE1_OUT                         : out  std_logic;
    RXELECIDLERESET0_IN                     : in   std_logic;
    RXELECIDLERESET1_IN                     : in   std_logic;
    RXN0_IN                                 : in   std_logic;
    RXN1_IN                                 : in   std_logic;
    RXP0_IN                                 : in   std_logic;
    RXP1_IN                                 : in   std_logic;
    -------- Receive Ports - RX Elastic Buffer and Phase Alignment Ports -------
    RXBUFRESET0_IN                          : in   std_logic;
    RXBUFRESET1_IN                          : in   std_logic;
    RXBUFSTATUS0_OUT                        : out  std_logic_vector(2 downto 0);
    RXBUFSTATUS1_OUT                        : out  std_logic_vector(2 downto 0);
    TXBUFSTATUS0_OUT                        : out  std_logic_vector(1 downto 0);
    TXBUFSTATUS1_OUT                        : out  std_logic_vector(1 downto 0);
    -------- Receive Ports - RX Elastic Buffer and Phase Alignment Ports -------
    RXCHANISALIGNED0_OUT			    : out std_logic;
    RXCHANISALIGNED1_OUT			    : out std_logic;
    RXCHANREALIGN0_OUT			    : out std_logic;
    RXCHANREALIGN1_OUT			    : out std_logic;
    RXENSAMPLEALIGN0_IN                     : in std_logic;
    RXENSAMPLEALIGN1_IN                     : in std_logic;
    ----------------- Receive Ports - RX Polarity Control Ports ----------------
    RXPOLARITY0_IN                          : in   std_logic;
    RXPOLARITY1_IN                          : in   std_logic;
    --------------------- Shared Ports - Tile and PLL Ports --------------------
    CLKIN_IN                                : in   std_logic;
    GTPRESET_IN                             : in   std_logic;
    PLLLKDET_OUT                            : out  std_logic;
    REFCLKOUT_OUT                           : out  std_logic;
    RESETDONE0_OUT                          : out  std_logic;
    RESETDONE1_OUT                          : out  std_logic;
    RXENELECIDLERESETB_IN                   : in   std_logic;
    TXENPMAPHASEALIGN_IN                    : in   std_logic;
    TXPMASETPHASE_IN                        : in   std_logic;
    ---------------- Transmit Ports - 8b10b Encoder Control Ports --------------
    TXCHARISK0_IN			    : in std_logic_vector(1 downto 0);
    TXCHARISK1_IN			    : in std_logic_vector(1 downto 0);
    -------------- Transmit Ports - 64b66b and 64b67b Gearbox Ports ------------
    TXDATA0_IN                              : in   std_logic_vector(15 downto 0);
    TXDATA1_IN                              : in   std_logic_vector(15 downto 0);
    TXOUTCLK0_OUT                           : out  std_logic;
    TXOUTCLK1_OUT                           : out  std_logic;
    TXRESET0_IN                             : in   std_logic;
    TXRESET1_IN                             : in   std_logic;
    TXUSRCLK0_IN                            : in   std_logic;
    TXUSRCLK1_IN                            : in   std_logic;
    TXUSRCLK20_IN                           : in   std_logic;
    TXUSRCLK21_IN                           : in   std_logic;
    --------------- Transmit Ports - TX Driver and OOB signalling --------------
    TXN0_OUT                                : out  std_logic;
    TXN1_OUT                                : out  std_logic;
    TXP0_OUT                                : out  std_logic;
    TXP1_OUT                                : out  std_logic
);
end component;

   signal tied_to_ground_i                                : std_logic;
   signal tied_to_ground_vec_i                            : std_logic_vector (63 downto 0);
   signal tied_to_vcc_i                                   : std_logic;
   signal chbondi                 : std_logic_vector (2 downto 0);
   signal combusin                : std_logic_vector (15 downto 0);
   signal chbondo                 : std_logic_vector (2 downto 0);
   signal combusout               : std_logic_vector (15 downto 0);
   signal open_rxbufstatus        : std_logic_vector (1 downto 0);
   signal open_txbufstatus        : std_logic;
   signal chbondi_LANE1                 : std_logic_vector (2 downto 0);
   signal combusin_LANE1                : std_logic_vector (15 downto 0);
   signal chbondo_LANE1                 : std_logic_vector (2 downto 0);
   signal combusout_LANE1               : std_logic_vector (15 downto 0);
   signal open_rxbufstatus_lane1        : std_logic_vector (1 downto 0);
   signal open_txbufstatus_lane1        : std_logic;
   signal chbondi_unused_i                                    : std_logic_vector (2 downto 0);
   signal combus_unused_i                                     : std_logic_vector (15 downto 0);
   --signal to output lock signal
   signal plllkdet_i                                      : std_logic;
   
   --Electrical idle reset logic signals           
   signal  rxenelecidleresetb_i    : std_logic;         
   signal  rxelecidlereset0_i      : std_logic;
   signal  rxelecidlereset1_i      : std_logic;  
   signal  serialloopback_i                                : std_logic;  
   signal  rxelecidle0_i           : std_logic; 
   signal  rxelecidle1_i           : std_logic; 
   signal  resetdone0_i            : std_logic;
   signal  resetdone1_i            : std_logic;

  

begin

   tied_to_ground_i <= '0';
   tied_to_ground_vec_i(63 downto 0) <= x"0000000000000000";
   tied_to_vcc_i <= '1';

   
   chbondi_unused_i  <= "000";
   combus_unused_i   <= X"0000";
--Assign lock signals
  PLLLKDET_OUT  <=   plllkdet_i;

 serialloopback_i   <= not LOOPBACK_IN(0) and LOOPBACK_IN(1) and not LOOPBACK_IN(2); 

   
RESETDONE  <= resetdone0_i or resetdone1_i ; --Fix for CR519148
RESET_LISM <= rxelecidlereset0_i or rxelecidlereset1_i;

-------------------------  Electrical Idle Reset Circuit  ---------------

--Drive RXELECIDLERESET with elec idle reset enabled during normal operation when RXELECIDLE goes high
rxelecidlereset0_i          <=   rxelecidle0_i and resetdone0_i and not serialloopback_i;
rxelecidlereset1_i          <=   rxelecidle1_i and resetdone1_i and not serialloopback_i;
rxenelecidleresetb_i        <=   not(rxelecidlereset0_i or rxelecidlereset1_i);    


 
   --Connect channel bonding bus
   chbondi <= chbondi_unused_i;

   
    


--*************************************************************************************************    
-------------------------------------ODD GTP-----------------------------------------------
--*************************************************************************************************
   GTP_TILE_INST : aurora_8b10b_v5_2_GTP_TILE
   generic map
   (
          --_______________________ Simulation-Only Attributes __________________
	  TILE_SIM_MODE                    => SIM_MODE,
          TILE_SIM_GTPRESET_SPEEDUP    => SIM_GTPRESET_SPEEDUP,
          TILE_SIM_PLL_PERDIV2             => SIM_PLL_PERDIV2,
          TILE_CHAN_BOND_LEVEL_0           => 0,
          TILE_CHAN_BOND_MODE_0           => "OFF",
          TILE_CHAN_BOND_MODE_1           =>  CHAN_BOND_MODE_1
         ) 
port map (
          ------------------------ Loopback and Powerdown Ports ----------------------
          LOOPBACK0_IN                  => "000",
          LOOPBACK1_IN                  => LOOPBACK_IN,
         RXPOWERDOWN0_IN(1 downto 0)   => tied_to_ground_vec_i(1 downto 0),
         RXPOWERDOWN1_IN(0)            => POWERDOWN_IN,
         RXPOWERDOWN1_IN(1)            => POWERDOWN_IN,
         TXPOWERDOWN0_IN(1 downto 0)   => tied_to_ground_vec_i(1 downto 0),
         TXPOWERDOWN1_IN(0)            => POWERDOWN_IN,
         TXPOWERDOWN1_IN(1)            => POWERDOWN_IN,
          ----------------------- Receive Ports - 8b10b Decoder ----------------------
            
           RXCHARISCOMMA0_OUT             => RXCHARISCOMMA_OUT_unused,
           RXCHARISCOMMA1_OUT             => RXCHARISCOMMA_OUT,
           RXCHARISK0_OUT                 => RXCHARISK_OUT_unused,
           RXCHARISK1_OUT                 => RXCHARISK_OUT,
           RXDISPERR0_OUT                 => RXDISPERR_OUT_unused,
           RXDISPERR1_OUT                 => RXDISPERR_OUT,
           RXNOTINTABLE0_OUT              => RXNOTINTABLE_OUT_unused,
           RXNOTINTABLE1_OUT              => RXNOTINTABLE_OUT,
          ------------------- Receive Ports - Channel Bonding Ports ------------------
          ------------------- Receive Ports - Clock Correction Ports -----------------
           RXCLKCORCNT0_OUT               => open,
           RXCLKCORCNT1_OUT               => open,
          --------------- Receive Ports - Comma Detection and Alignment --------------
           RXBYTEREALIGN0_OUT             => RXREALIGN_OUT_unused,
           RXBYTEREALIGN1_OUT             => RXREALIGN_OUT ,
           RXENMCOMMAALIGN0_IN           => tied_to_ground_i,
           RXENMCOMMAALIGN1_IN           => ENMCOMMAALIGN_IN,
           RXENPCOMMAALIGN0_IN           => tied_to_ground_i,
           RXENPCOMMAALIGN1_IN           => ENPCOMMAALIGN_IN,
          ------------------- Receive Ports - RX Data Path interface -----------------
             
           RXDATA0_OUT                    => RXDATA_OUT_unused,
           RXDATA1_OUT                    => RXDATA_OUT,
           RXDATAWIDTH0_IN                => tied_to_vcc_i,
           RXDATAWIDTH1_IN                => tied_to_vcc_i,
           RXRESET0_IN                   => tied_to_ground_i ,
           RXRESET1_IN                   => RXRESET_IN,
           RXUSRCLK0_IN                  => tied_to_ground_i,
           RXUSRCLK1_IN                  => RXUSRCLK_IN ,
           RXUSRCLK20_IN                 => tied_to_ground_i,
           RXUSRCLK21_IN                 => RXUSRCLK2_IN,
          ------- Receive Ports - RX Driver,OOB signalling,Coupling and Eq.,CDR ------
           RXCDRRESET0_IN                => tied_to_ground_i,
           RXCDRRESET1_IN                => tied_to_ground_i,
           
           RXELECIDLE0_OUT               => rxelecidle0_i,
           RXELECIDLE1_OUT               => rxelecidle1_i,
           RXELECIDLERESET0_IN           => rxelecidlereset0_i,
           RXELECIDLERESET1_IN           => rxelecidlereset1_i,
           RXN0_IN                       => RX1N_IN_unused,
           RXN1_IN                       => RX1N_IN,
           RXP0_IN                       => RX1P_IN_unused,
           RXP1_IN                       => RX1P_IN,
          -------- Receive Ports - RX Elastic Buffer and Phase Alignment Ports -------
           RXBUFRESET0_IN                => tied_to_ground_i,
           RXBUFRESET1_IN                => tied_to_ground_i,

           RXBUFSTATUS0_OUT               => RXBUFERR_OUT_unused,
           RXBUFSTATUS1_OUT(2)            => RXBUFERR_OUT,
           RXBUFSTATUS1_OUT(1 downto 0)   => open_rxbufstatus(1 downto 0),

           TXBUFSTATUS0_OUT               => TXBUFERR_OUT_unused,
           TXBUFSTATUS1_OUT(1)            => TXBUFERR_OUT,
           TXBUFSTATUS1_OUT(0)            => open_txbufstatus,

           RXCHANISALIGNED0_OUT           => CHBONDDONE_OUT_unused,
           RXCHANISALIGNED1_OUT           => CHBONDDONE_OUT,
           RXCHANREALIGN0_OUT             => open,
           RXCHANREALIGN1_OUT             => open,
          RXENSAMPLEALIGN0_IN           => tied_to_ground_i,
          RXENSAMPLEALIGN1_IN           => tied_to_ground_i,

          ----------------- Receive Ports - RX Polarity Control Ports ----------------
           RXPOLARITY0_IN                => tied_to_ground_i,
           RXPOLARITY1_IN                => RXPOLARITY_IN,
          --------------------- Shared Ports - Tile and PLL Ports --------------------
          CLKIN_IN                      => REFCLK,

           GTPRESET_IN                   => GTPRESET_IN,
           
           PLLLKDET_OUT                   => plllkdet_i,
           REFCLKOUT_OUT                  => REFCLKOUT_OUT,
           RESETDONE0_OUT                 => resetdone0_i,
           RESETDONE1_OUT                 => resetdone1_i,
           
           RXENELECIDLERESETB_IN         => rxenelecidleresetb_i,
           TXENPMAPHASEALIGN_IN          => tied_to_ground_i,
           TXPMASETPHASE_IN              => tied_to_ground_i,
            
           ---------------- Transmit Ports - 8b10b Encoder Control Ports --------------
           TXCHARISK1_IN                 => TXCHARISK_IN,
           TXCHARISK0_IN                 => tied_to_ground_vec_i(1 downto 0),
           ------------------ Transmit Ports - TX Data Path interface -----------------
             
           TXDATA0_IN                    => tied_to_ground_vec_i(15 downto 0),
           TXDATA1_IN                    => TXDATA_IN,
           
 
           TXOUTCLK0_OUT                  => open, --TXOUTCLK1_OUT_unused,
           TXOUTCLK1_OUT                  => TXOUTCLK1_OUT,
           TXRESET0_IN                   => tied_to_ground_i ,
           TXRESET1_IN                   => TXRESET_IN,
           TXUSRCLK0_IN                  => tied_to_ground_i,
           TXUSRCLK1_IN                  => TXUSRCLK_IN,
           TXUSRCLK20_IN                 => tied_to_ground_i,
           TXUSRCLK21_IN                 => TXUSRCLK2_IN,
           --------------- Transmit Ports - TX Driver and OOB signalling --------------
           TXN0_OUT                       => TX1N_OUT_unused,
           TXN1_OUT                       => TX1N_OUT,
           TXP0_OUT                       => TX1P_OUT_unused,
           TXP1_OUT                       => TX1P_OUT
);         


end BEHAVIORAL;   
